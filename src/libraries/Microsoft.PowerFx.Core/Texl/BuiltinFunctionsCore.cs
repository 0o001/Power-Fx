// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

using System.Collections.Generic;
using System.Linq;
using Microsoft.PowerFx.Core.Functions;
using Microsoft.PowerFx.Core.Texl.Builtins;
using Microsoft.PowerFx.Core.Utils;

namespace Microsoft.PowerFx.Core.Texl
{
    // List of TexlFunction instances in Power Fx core.
    // - no ControlInfo dependency 
    // - just functions that are ported over to Language.Core
    internal class BuiltinFunctionsCore
    {
        public IEnumerable<TexlFunction> BuiltinFunctionsLibrary => _library;

        internal IEnumerable<TexlFunction> TestOnly_AllBuiltinFunctions => _library.Concat(_featureGateFunctions);

        // Functions in this list are shared and may show up in other hosts by default.
        private readonly List<TexlFunction> _library = new List<TexlFunction>(200);
        private readonly List<TexlFunction> _featureGateFunctions = new List<TexlFunction>();

        public readonly TexlFunction AmPm;
        public readonly TexlFunction AmPmShort;
        public readonly TexlFunction Abs;
        public readonly TexlFunction AbsT;
        public readonly TexlFunction Acos;
        public readonly TexlFunction AcosT;
        public readonly TexlFunction Acot;
        public readonly TexlFunction AcotT;
        public readonly TexlFunction AddColumns;
        public readonly TexlFunction And;
        public readonly TexlFunction Asin;
        public readonly TexlFunction AsinT;
        public readonly TexlFunction AsType;
        public readonly TexlFunction Atan;
        public readonly TexlFunction AtanT;
        public readonly TexlFunction Atan2;
        public readonly TexlFunction Average;
        public readonly TexlFunction AverageT;
        public readonly TexlFunction Blank;
        public readonly TexlFunction Boolean;
        public readonly TexlFunction Boolean_T;
        public readonly TexlFunction BooleanN;
        public readonly TexlFunction BooleanN_T;
        public readonly TexlFunction Boolean_UO;
        public readonly TexlFunction Clock24;
        public readonly TexlFunction Char;
        public readonly TexlFunction CharT;
        public readonly TexlFunction Coalesce;
        public readonly TexlFunction ColorFade;
        public readonly TexlFunction ColorFadeT;
        public readonly TexlFunction ColorValue;
        public readonly TexlFunction ColorValue_UO;
        public readonly TexlFunction Concat;
        public readonly TexlFunction Concatenate;
        public readonly TexlFunction ConcatenateT;
        public readonly TexlFunction Cos;
        public readonly TexlFunction CosT;
        public readonly TexlFunction Cot;
        public readonly TexlFunction CotT;
        public readonly TexlFunction Count;
        public readonly TexlFunction CountA;
        public readonly TexlFunction CountIf;
        public readonly TexlFunction CountRows;
        public readonly TexlFunction CountRows_UO;
        public readonly TexlFunction Date;
        public readonly TexlFunction DateAdd;
        public readonly TexlFunction DateAddT;
        public readonly TexlFunction DateDiff;
        public readonly TexlFunction DateDiffT;
        public readonly TexlFunction DateTimeValue;
        public readonly TexlFunction DateTimeValue_UO;
        public readonly TexlFunction DateValue;
        public readonly TexlFunction DateValue_UO;
        public readonly TexlFunction Day;
        public readonly TexlFunction Degrees;
        public readonly TexlFunction DegreesT;
        public readonly TexlFunction EndsWith;
        public readonly TexlFunction Error;
        public readonly TexlFunction Exp;
        public readonly TexlFunction ExpT;
        public readonly TexlFunction Filter;
        public readonly TexlFunction Find;
        public readonly TexlFunction FindT;
        public readonly TexlFunction First;
        public readonly TexlFunction FirstN;
        public readonly TexlFunction ForAll;
        public readonly TexlFunction ForAll_UO;
        public readonly TexlFunction GUIDPure;
        public readonly TexlFunction GUID_UO;
        public readonly TexlFunction Hour;
        public readonly TexlFunction If;
        public readonly TexlFunction IfError;
        public readonly TexlFunction Index;
        public readonly TexlFunction Index_UO;
        public readonly TexlFunction Int;
        public readonly TexlFunction IntT;
        public readonly TexlFunction IsBlank;
        public readonly TexlFunction IsBlankOptionSetValue;
        public readonly TexlFunction IsBlankOrError;
        public readonly TexlFunction IsBlankOrErrorOptionSetValue;
        public readonly TexlFunction IsEmpty;
        public readonly TexlFunction IsError;
        public readonly TexlFunction IsToday;
        public readonly TexlFunction IsNumeric;
        public readonly TexlFunction ISOWeekNum;
        public readonly TexlFunction Last;
        public readonly TexlFunction LastN;
        public readonly TexlFunction Left;
        public readonly TexlFunction LeftTS;
        public readonly TexlFunction LeftTT;
        public readonly TexlFunction LeftST;
        public readonly TexlFunction Len;
        public readonly TexlFunction LenT;
        public readonly TexlFunction Ln;
        public readonly TexlFunction LnT;
        public readonly TexlFunction Log;
        public readonly TexlFunction LogT;
        public readonly TexlFunction LookUp;
        public readonly TexlFunction Lower;
        public readonly TexlFunction LowerT;
        public readonly TexlFunction Max;
        public readonly TexlFunction MaxT;
        public readonly TexlFunction Mid;
        public readonly TexlFunction MidT;
        public readonly TexlFunction Min;
        public readonly TexlFunction MinT;
        public readonly TexlFunction Minute;
        public readonly TexlFunction Mod;
        public readonly TexlFunction ModT;
        public readonly TexlFunction Month;
        public readonly TexlFunction MonthsLong;
        public readonly TexlFunction MonthsShort;
        public readonly TexlFunction Not;
        public readonly TexlFunction Now;
        public readonly TexlFunction Or;
        public readonly TexlFunction ParseJSON;
        public readonly TexlFunction Power;
        public readonly TexlFunction PowerT;
        public readonly TexlFunction Pi;
        public readonly TexlFunction Proper;
        public readonly TexlFunction ProperT;
        public readonly TexlFunction Radians;
        public readonly TexlFunction RadiansT;
        public readonly TexlFunction Rand;
        public readonly TexlFunction RandBetween;
        public readonly TexlFunction Replace;
        public readonly TexlFunction ReplaceT;
        public readonly TexlFunction RGBA;
        public readonly TexlFunction Right;
        public readonly TexlFunction RightTS;
        public readonly TexlFunction RightTT;
        public readonly TexlFunction RightST;
        public readonly TexlFunction Round;
        public readonly TexlFunction RoundT;
        public readonly TexlFunction RoundDown;
        public readonly TexlFunction RoundDownT;
        public readonly TexlFunction RoundUp;
        public readonly TexlFunction RoundUpT;
        public readonly TexlFunction Second;
        public readonly TexlFunction Sequence;
        public readonly TexlFunction Shuffle;
        public readonly TexlFunction Sin;
        public readonly TexlFunction Sort;
        public readonly TexlFunction SortByColumns;
        public readonly TexlFunction SortByColumnsOrderTable;
        public readonly TexlFunction SinT;
        public readonly TexlFunction Split;
        public readonly TexlFunction Sqrt;
        public readonly TexlFunction SqrtT;
        public readonly TexlFunction StartsWith;
        public readonly TexlFunction StdevP;
        public readonly TexlFunction StdevPT;
        public readonly TexlFunction Substitute;
        public readonly TexlFunction SubstituteT;
        public readonly TexlFunction Sum;
        public readonly TexlFunction SumT;
        public readonly TexlFunction Switch;
        public readonly TexlFunction Table;
        public readonly TexlFunction Table_UO;
        public readonly TexlFunction Tan;
        public readonly TexlFunction TanT;
        public readonly TexlFunction Time;
        public readonly TexlFunction TimeValue;
        public readonly TexlFunction TimeValue_UO;
        public readonly TexlFunction TimeZoneOffset;
        public readonly TexlFunction Today;
        public readonly TexlFunction Trim;
        public readonly TexlFunction TrimT;
        public readonly TexlFunction TrimEnds;
        public readonly TexlFunction TrimEndsT;
        public readonly TexlFunction Trunc;
        public readonly TexlFunction TruncT;
        public readonly TexlFunction Upper;
        public readonly TexlFunction UpperT;
        public readonly TexlFunction Value;
        public readonly TexlFunction Value_UO;
        public readonly TexlFunction VarP;
        public readonly TexlFunction VarPT;
        public readonly TexlFunction Text;
        public readonly TexlFunction Text_UO;
        public readonly TexlFunction Weekday;
        public readonly TexlFunction WeekdaysLong;
        public readonly TexlFunction WeekdaysShort;
        public readonly TexlFunction WeekNum;
        public readonly TexlFunction With;
        public readonly TexlFunction Year;

        // NOTE: These functions should not be part of the core library until they are implemented in all runtimes
        public readonly TexlFunction DateTime;

        public readonly TexlFunction IsUTCToday;
        public readonly TexlFunction UTCNow;
        public readonly TexlFunction UTCToday;

        public BuiltinFunctionsCore(TexlFunctionConfig instanceConfig)
        {
            AmPm = _library.Append(new AmPmFunction(instanceConfig));
            AmPmShort = _library.Append(new AmPmShortFunction(instanceConfig));
            Abs = _library.Append(new AbsFunction(instanceConfig));
            AbsT = _library.Append(new AbsTableFunction(instanceConfig));
            Acos = _library.Append(new AcosFunction(instanceConfig));
            AcosT = _library.Append(new AcosTableFunction(instanceConfig));
            Acot = _library.Append(new AcotFunction(instanceConfig));
            AcotT = _library.Append(new AcotTableFunction(instanceConfig));
            AddColumns = _library.Append(new AddColumnsFunction(instanceConfig));
            And = _library.Append(new VariadicLogicalFunction(instanceConfig, isAnd: true));
            Asin = _library.Append(new AsinFunction(instanceConfig));
            AsinT = _library.Append(new AsinTableFunction(instanceConfig));
            AsType = _library.Append(new AsTypeFunction(instanceConfig));
            Atan = _library.Append(new AtanFunction(instanceConfig));
            AtanT = _library.Append(new AtanTableFunction(instanceConfig));
            Atan2 = _library.Append(new Atan2Function(instanceConfig));
            Average = _library.Append(new AverageFunction(instanceConfig));
            AverageT = _library.Append(new AverageTableFunction(instanceConfig));
            Blank = _library.Append(new BlankFunction(instanceConfig));
            Boolean = _library.Append(new BooleanFunction(instanceConfig));
            Boolean_T = _library.Append(new BooleanFunction_T(instanceConfig));
            BooleanN = _library.Append(new BooleanNFunction(instanceConfig));
            BooleanN_T = _library.Append(new BooleanNFunction_T(instanceConfig));
            Boolean_UO = _library.Append(new BooleanFunction_UO(instanceConfig));
            Clock24 = _library.Append(new IsClock24Function(instanceConfig));
            Char = _library.Append(new CharFunction(instanceConfig));
            CharT = _library.Append(new CharTFunction(instanceConfig));
            Coalesce = _library.Append(new CoalesceFunction(instanceConfig));
            ColorFade = _library.Append(new ColorFadeFunction(instanceConfig));
            ColorFadeT = _library.Append(new ColorFadeTFunction(instanceConfig));
            ColorValue = _library.Append(new ColorValueFunction(instanceConfig));
            ColorValue_UO = _library.Append(new ColorValueFunction_UO(instanceConfig));
            Concat = _library.Append(new ConcatFunction(instanceConfig));
            Concatenate = _library.Append(new ConcatenateFunction(instanceConfig));
            ConcatenateT = _library.Append(new ConcatenateTableFunction(instanceConfig));
            Cos = _library.Append(new CosFunction(instanceConfig));
            CosT = _library.Append(new CosTableFunction(instanceConfig));
            Cot = _library.Append(new CotFunction(instanceConfig));
            CotT = _library.Append(new CotTableFunction(instanceConfig));
            Count = _library.Append(new CountFunction(instanceConfig));
            CountA = _library.Append(new CountAFunction(instanceConfig));
            CountIf = _library.Append(new CountIfFunction(instanceConfig));
            CountRows = _library.Append(new CountRowsFunction(instanceConfig));
            CountRows_UO = _library.Append(new CountRowsFunction_UO(instanceConfig));
            Date = _library.Append(new DateFunction(instanceConfig));
            DateAdd = _library.Append(new DateAddFunction(instanceConfig));
            DateAddT = _library.Append(new DateAddTFunction(instanceConfig));
            DateDiff = _library.Append(new DateDiffFunction(instanceConfig));
            DateDiffT = _library.Append(new DateDiffTFunction(instanceConfig));
            DateTimeValue = _library.Append(new DateTimeValueFunction(instanceConfig));
            DateTimeValue_UO = _library.Append(new DateTimeValueFunction_UO(instanceConfig));
            DateValue = _library.Append(new DateValueFunction(instanceConfig));
            DateValue_UO = _library.Append(new DateValueFunction_UO(instanceConfig));
            Day = _library.Append(new DayFunction(instanceConfig));
            Degrees = _library.Append(new DegreesFunction(instanceConfig));
            DegreesT = _library.Append(new DegreesTableFunction(instanceConfig));
            EndsWith = _library.Append(new EndsWithFunction(instanceConfig));
            Error = _library.Append(new ErrorFunction(instanceConfig));
            Exp = _library.Append(new ExpFunction(instanceConfig));
            ExpT = _library.Append(new ExpTableFunction(instanceConfig));
            Filter = _library.Append(new FilterFunction(instanceConfig));
            Find = _library.Append(new FindFunction(instanceConfig));
            FindT = _library.Append(new FindTFunction(instanceConfig));
            First = _library.Append(new FirstLastFunction(instanceConfig, isFirst: true));
            FirstN = _library.Append(new FirstLastNFunction(instanceConfig, isFirst: true));
            ForAll = _library.Append(new ForAllFunction(instanceConfig));
            ForAll_UO = _library.Append(new ForAllFunction_UO(instanceConfig));
            GUIDPure = _library.Append(new GUIDPureFunction(instanceConfig));
            GUID_UO = _library.Append(new GUIDPureFunction_UO(instanceConfig));
            Hour = _library.Append(new HourFunction(instanceConfig));
            If = _library.Append(new IfFunction(instanceConfig));
            IfError = _library.Append(new IfErrorFunction(instanceConfig));
            Index = _library.Append(new IndexFunction(instanceConfig));
            Index_UO = _library.Append(new IndexFunction_UO(instanceConfig));
            Int = _library.Append(new IntFunction(instanceConfig));
            IntT = _library.Append(new IntTableFunction(instanceConfig));
            IsBlank = _library.Append(new IsBlankFunction(instanceConfig));
            IsBlankOptionSetValue = _library.Append(new IsBlankOptionSetValueFunction(instanceConfig));
            IsBlankOrError = _library.Append(new IsBlankOrErrorFunction(instanceConfig));
            IsBlankOrErrorOptionSetValue = _library.Append(new IsBlankOrErrorOptionSetValueFunction(instanceConfig));
            IsEmpty = _library.Append(new IsEmptyFunction(instanceConfig));
            IsError = _library.Append(new IsErrorFunction(instanceConfig));
            IsToday = _library.Append(new IsTodayFunction(instanceConfig));
            IsNumeric = _library.Append(new IsNumericFunction(instanceConfig));
            ISOWeekNum = _library.Append(new ISOWeekNumFunction(instanceConfig));
            Last = _library.Append(new FirstLastFunction(instanceConfig, isFirst: false));
            LastN = _library.Append(new FirstLastNFunction(instanceConfig, isFirst: false));
            Left = _library.Append(new LeftRightScalarFunction(instanceConfig, isLeft: true));
            LeftTS = _library.Append(new LeftRightTableScalarFunction(instanceConfig, isLeft: true));
            LeftTT = _library.Append(new LeftRightTableTableFunction(instanceConfig, isLeft: true));
            LeftST = _library.Append(new LeftRightScalarTableFunction(instanceConfig, isLeft: true));
            Len = _library.Append(new LenFunction(instanceConfig));
            LenT = _library.Append(new LenTFunction(instanceConfig));
            Ln = _library.Append(new LnFunction(instanceConfig));
            LnT = _library.Append(new LnTableFunction(instanceConfig));
            Log = _library.Append(new LogFunction(instanceConfig));
            LogT = _library.Append(new LogTFunction(instanceConfig));
            LookUp = _library.Append(new LookUpFunction(instanceConfig));
            Lower = _library.Append(new LowerUpperFunction(instanceConfig, isLower: true));
            LowerT = _library.Append(new LowerUpperTFunction(instanceConfig, isLower: true));
            Max = _library.Append(new MinMaxFunction(instanceConfig, isMin: false));
            MaxT = _library.Append(new MinMaxTableFunction(instanceConfig, isMin: false));
            Mid = _library.Append(new MidFunction(instanceConfig));
            MidT = _library.Append(new MidTFunction(instanceConfig));
            Min = _library.Append(new MinMaxFunction(instanceConfig, isMin: true));
            MinT = _library.Append(new MinMaxTableFunction(instanceConfig, isMin: true));
            Minute = _library.Append(new MinuteFunction(instanceConfig));
            Mod = _library.Append(new ModFunction(instanceConfig));
            ModT = _library.Append(new ModTFunction(instanceConfig));
            Month = _library.Append(new MonthFunction(instanceConfig));
            MonthsLong = _library.Append(new MonthsLongFunction(instanceConfig));
            MonthsShort = _library.Append(new MonthsShortFunction(instanceConfig));
            Not = _library.Append(new NotFunction(instanceConfig));
            Now = _library.Append(new NowFunction(instanceConfig));
            Or = _library.Append(new VariadicLogicalFunction(instanceConfig, isAnd: false));
            ParseJSON = _library.Append(new ParseJSONFunction(instanceConfig));
            Power = _library.Append(new PowerFunction(instanceConfig));
            PowerT = _library.Append(new PowerTFunction(instanceConfig));
            Pi = _library.Append(new PiFunction(instanceConfig));
            Proper = _library.Append(new ProperFunction(instanceConfig));
            ProperT = _library.Append(new ProperTFunction(instanceConfig));
            Radians = _library.Append(new RadiansFunction(instanceConfig));
            RadiansT = _library.Append(new RadiansTableFunction(instanceConfig));
            Rand = _library.Append(new RandFunction(instanceConfig));
            RandBetween = _library.Append(new RandBetweenFunction(instanceConfig));
            Replace = _library.Append(new ReplaceFunction(instanceConfig));
            ReplaceT = _library.Append(new ReplaceTFunction(instanceConfig));
            RGBA = _library.Append(new RGBAFunction(instanceConfig));
            Right = _library.Append(new LeftRightScalarFunction(instanceConfig, isLeft: false));
            RightTS = _library.Append(new LeftRightTableScalarFunction(instanceConfig, isLeft: false));
            RightTT = _library.Append(new LeftRightTableTableFunction(instanceConfig, isLeft: false));
            RightST = _library.Append(new LeftRightScalarTableFunction(instanceConfig, isLeft: false));
            Round = _library.Append(new RoundScalarFunction(instanceConfig));
            RoundT = _library.Append(new RoundTableFunction(instanceConfig));
            RoundDown = _library.Append(new RoundDownScalarFunction(instanceConfig));
            RoundDownT = _library.Append(new RoundDownTableFunction(instanceConfig));
            RoundUp = _library.Append(new RoundUpScalarFunction(instanceConfig));
            RoundUpT = _library.Append(new RoundUpTableFunction(instanceConfig));
            Second = _library.Append(new SecondFunction(instanceConfig));
            Sequence = _library.Append(new SequenceFunction(instanceConfig));
            Shuffle = _library.Append(new ShuffleFunction(instanceConfig));
            Sin = _library.Append(new SinFunction(instanceConfig));
            Sort = _library.Append(new SortFunction(instanceConfig));
            SortByColumns = _library.Append(new SortByColumnsFunction(instanceConfig));
            SortByColumnsOrderTable = _library.Append(new SortByColumnsOrderTableFunction(instanceConfig));
            SinT = _library.Append(new SinTableFunction(instanceConfig));
            Split = _library.Append(new SplitFunction(instanceConfig));
            Sqrt = _library.Append(new SqrtFunction(instanceConfig));
            SqrtT = _library.Append(new SqrtTableFunction(instanceConfig));
            StartsWith = _library.Append(new StartsWithFunction(instanceConfig));
            StdevP = _library.Append(new StdevPFunction(instanceConfig));
            StdevPT = _library.Append(new StdevPTableFunction(instanceConfig));
            Substitute = _library.Append(new SubstituteFunction(instanceConfig));
            SubstituteT = _library.Append(new SubstituteTFunction(instanceConfig));
            Sum = _library.Append(new SumFunction(instanceConfig));
            SumT = _library.Append(new SumTableFunction(instanceConfig));
            Switch = _library.Append(new SwitchFunction(instanceConfig));
            Table = _library.Append(new TableFunction(instanceConfig));
            Table_UO = _library.Append(new TableFunction_UO(instanceConfig));
            Tan = _library.Append(new TanFunction(instanceConfig));
            TanT = _library.Append(new TanTableFunction(instanceConfig));
            Time = _library.Append(new TimeFunction(instanceConfig));
            TimeValue = _library.Append(new TimeValueFunction(instanceConfig));
            TimeValue_UO = _library.Append(new TimeValueFunction_UO(instanceConfig));
            TimeZoneOffset = _library.Append(new TimeZoneOffsetFunction(instanceConfig));
            Today = _library.Append(new TodayFunction(instanceConfig));
            Trim = _library.Append(new TrimFunction(instanceConfig));
            TrimT = _library.Append(new TrimTFunction(instanceConfig));
            TrimEnds = _library.Append(new TrimEndsFunction(instanceConfig));
            TrimEndsT = _library.Append(new TrimEndsTFunction(instanceConfig));
            Trunc = _library.Append(new TruncFunction(instanceConfig));
            TruncT = _library.Append(new TruncTableFunction(instanceConfig));
            Upper = _library.Append(new LowerUpperFunction(instanceConfig, isLower: false));
            UpperT = _library.Append(new LowerUpperTFunction(instanceConfig, isLower: false));
            Value = _library.Append(new ValueFunction(instanceConfig));
            Value_UO = _library.Append(new ValueFunction_UO(instanceConfig));
            VarP = _library.Append(new VarPFunction(instanceConfig));
            VarPT = _library.Append(new VarPTableFunction(instanceConfig));
            Text = _library.Append(new TextFunction(instanceConfig));
            Text_UO = _library.Append(new TextFunction_UO(instanceConfig));
            Weekday = _library.Append(new WeekdayFunction(instanceConfig));
            WeekdaysLong = _library.Append(new WeekdaysLongFunction(instanceConfig));
            WeekdaysShort = _library.Append(new WeekdaysShortFunction(instanceConfig));
            WeekNum = _library.Append(new WeekNumFunction(instanceConfig));
            With = _library.Append(new WithFunction(instanceConfig));
            Year = _library.Append(new YearFunction(instanceConfig));
            DateTime = _featureGateFunctions.Append(new DateTimeFunction(instanceConfig));

            IsUTCToday = _featureGateFunctions.Append(new IsUTCTodayFunction(instanceConfig));
            UTCNow = _featureGateFunctions.Append(new UTCNowFunction(instanceConfig));
            UTCToday = _featureGateFunctions.Append(new UTCTodayFunction(instanceConfig));
        }
    }
}
